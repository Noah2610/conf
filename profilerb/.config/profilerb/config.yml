### This is the default config.yml file for profile.rb.
### The config defines the files you want to have processed by profile.rb
### and what syntax you want to use.

## These are your file aliases.
## Define full config paths here and use the aliases
## from the command-line or under 'files'.
## You can use '$HOME' or '~' for your home directory;
## '~' is treated the same as '$HOME', because the script can
## determine the user's home directory more reliably.
## '$ROOT' is also available, which points to the profile.rb script's
## project root directory.
file_aliases:
  bashrc:           '$HOME/.bashrc'
  i3blocks:         '$HOME/.config/i3/i3blocks.conf'
  i3blocks_scripts: '$HOME/.config/i3/i3blocks'
  i3config:         '$HOME/.config/i3/config'
  i3status:         '$HOME/.config/i3/i3status.conf'
  shortstrokes:     '$HOME/.config/shortstrokes/config.yml'
  termite:          '$HOME/.config/termite/config'
  togglemouse:      '$HOME/.config/i3/scripts/togglemouse.sh'
  vimrc:            '$HOME/.vimrc'
  wrapper:          '$HOME/.config/i3/wrapper.py'
  xmodmap:          '$HOME/.Xmodmap'
  zshrc:            '$HOME/.zshrc'
  zsh_files:        '$HOME/.config/zsh-custom'
  alacritty:        '$HOME/.config/alacritty/alacritty.yml'
  dunst:            '$HOME/.config/dunst/dunstrc'

## These are the default files you want to have processed.
## You can either define full paths (starting with '/', '$HOME', or '~')
## or use a file alias key and define the full path under 'file_aliases'.
files:
  - 'bashrc'
  - 'i3blocks'
  - 'i3blocks_scripts'
  - 'i3config'
  - 'shortstrokes'
  - 'togglemouse'
  - 'termite'
  - 'zsh_files'
  - 'alacritty'
  - 'dunst'

## Here you can associate profiles with a hostname.
## When the script is run without profile(s) given as an argument on
## the command-line, then it tries to match the hostname with a key here
## and use its value as the profiles.
## You can also define default profiles as a key named 'default',
## which is used when no profile is given via CL argument and it couldn't
## match a hostname defined here. You can use the special value
## '$HOSTNAME' for key 'default' to use the machines hostname
## as the profile, by default.
hostname_profiles:
  desktop-arch:
    - 'h77m-arch'
  acer-arch:
    - 'acer'
    - 'create'
  AWARE-arch:
    - 'aware'
  aware-desktop:
    - 'aware-desktop'
  manjaro:
    - 'desktop-manjaro'
  manjaro-create:
    - 'manjaro-create'
    - 'create'
  gram:
    - 'gram-codecool'
    - 'onedisp'
  default:
    - '$HOSTNAME'

## Here the syntax you will be using in your configs is defined.
## It is recommended to use the default syntax, but you are free to change it.
## The values are Regular Expressions; it is not necessary to wrap them
## in slashes ('/'), but without slashes you cannot pass any options.
## See http://rubular.com/ for valid Ruby RegExp.
## 'single' and 'block_start' require custom conditions following the
## keywords in your configs, so it is recommended to use some identifier
## at the end like '=' or ':'.
## Spaces are also valid if you want it to look nicer.
keywords:
  # The separator character is used to separate the keywords from
  # your custom conditions in your configs. It is used to find your conditions
  # if it matches a line with one of the keywords' Regular Expressions.
  # You can and should use the special character '=' in your
  # Regular Expressions; it will be replaced by the 'separator' value.
  separator:   '='
  single:      '/\A\s*(.)\1?PROFILE\s*=/'
  block_start: '/\A\s*(.)\1?PROFILE_START\s*=/'
  block_end:   '/\A\s*(.)\1?PROFILE_END\z/'
  #                   ^^^^^^
  #  This RegExp snippet should be matched to your config's comment
  #  character(s). All this part does is check if any one or two
  #  of the same characters are at the beginning of your line.
  #  The point behind this is that although most config files will use
  #  a single character as a one-line comment, a lot of programming
  #  languages use two of the same characters as a one-line comment,
  #  so if you're using a config file in a language that does this,
  #  this will cover that case as well.
  #  It also takes into account that there might be some whitespace
  #  at the beginning of the line.

