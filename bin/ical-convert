#!/usr/bin/env ruby

require 'date'

module Helper
  private
    MESSAGE_PADDING = '  '

    def error *messages
      message = messages.flatten.join(?\n).gsub(/^/, MESSAGE_PADDING)
      prog_name = File.basename $0
      abort([
        "#{prog_name}: ERROR",
        "#{message}",
        "#{MESSAGE_PADDING}Exiting."
      ].join(?\n))
    end

    def validate_file file
      error(
        "File does not exist or is a directory:",
        file.to_s
      )  unless (File.file? file.to_s)
    end

    def validate_none_nil array
      error(
        "An error occured."
      )  if (array.any? nil)
    end
end

class IcalConverter
  include Helper
  CALENDAR_FILE_WRAPPER_LINES = [
    'BEGIN:VCALENDAR',
    'END:VCALENDAR'
  ]
  METADATA_KEYS = [
    'PRODID',
    'VERSION'
  ]

  def initialize input_file
    input_file.strip!
    if (input_file == ?-)
      @calendar_content = ''
      while input = gets
        @calendar_content += input
      end
    else
      validate_file input_file
      @calendar_content = File.read input_file
    end
  end

  def convert
    metadata = get_calendar_metadata
    events   = get_calendar_events
    todos    = get_calendar_todos
    events_adjusted = get_adjusted_events events
    output = [
      CALENDAR_FILE_WRAPPER_LINES.first,
      get_joined_calendar_data(metadata),
      get_joined_calendar_data(events_adjusted),
      get_joined_calendar_data(todos),
      CALENDAR_FILE_WRAPPER_LINES.last
    ].join(?\n)
    puts output
  end

  private

    def get_calendar_metadata
      return [@calendar_content.split(?\n).select do |line|
        next METADATA_KEYS.any? do |metadata_key|
          line.match?(/^#{Regexp.quote metadata_key}:.+$/)
        end
      end .map do |line|
        next line.split(?:)
      end .to_h]
    end

    def get_calendar_events
      return get_calendar_attributes_matching(/^BEGIN:VEVENT$.+?^END:VEVENT$/m)
    end

    def get_calendar_todos
      return get_calendar_attributes_matching(/^BEGIN:VTODO$.+?^END:VTODO$/m)
    end

    def get_calendar_attributes_matching regex
      return @calendar_content.scan(regex).map do |event_data|
        next event_data.strip.split(?\n).map do |event_attributes|
          next event_attributes.split(?:)
        end .to_h
      end
    end

    def get_adjusted_events events
      return events.map do |event|
        new_event = event.dup
        if (event.key? 'DTSTART')
          if (event.key?('DURATION') && !event.key?('DTEND'))
            dtend = get_dtend_from_dtstart_and_duration event['DTSTART'], event['DURATION']
            new_event['DTEND'] = dtend
            new_event.delete 'DURATION'
          elsif (!event.key?('DURATION') && !event.key?('DTEND'))
            # All-day event
            new_event['DTEND'] = new_event['DTSTART']
          end
          new_event = get_sorted_data new_event
          next new_event
        else
          next nil
        end
      end .compact
    end

    def get_dtend_from_dtstart_and_duration dtstart, duration
      start_time     = DateTime.strptime dtstart, '%Y%m%dT%H%M%S'
      duration_times = {
        day:    duration.match(/([0-9]+)D/)[1],
        hour:   duration.match(/([0-9]+)H/)[1],
        minute: duration.match(/([0-9]+)M/)[1],
        second: duration.match(/([0-9]+)S/)[1]
      }
      validate_none_nil duration_times.values
      duration_times.each do |key, val|
        duration_times[key] = val.to_i
      end
      end_times = {
        year:   start_time.year,
        month:  start_time.month,
        day:    (start_time.day  + duration_times[:day]),
        hour:   (start_time.hour + duration_times[:hour]),
        minute: (start_time.min  + duration_times[:minute]),
        second: (start_time.sec  + duration_times[:second])
      }
      end_seconds = (
        Time.new(end_times[:year], end_times[:month]).to_i +
        (get_hours_in_days(end_times[:day] - 1) * 60 * 60) +  # -1 on days because we want to get the hours until the start of the given day, instead of the hours of N days.
        (end_times[:hour]                       * 60 * 60) +
        (end_times[:minute]                          * 60) +
        end_times[:second]
      )
      return Time.at(end_seconds).strftime('%Y%m%dT%H%M%S')
    end

    def get_joined_calendar_data calendar_data
      return calendar_data.map do |data|
        next data.map do |key, val|
          next "#{key.to_s}:#{val.to_s}"
        end .join(?\n)
      end .join(?\n)
    end

    def get_sorted_data data
      return data.sort do |data_one, data_two|
        val_one = 0
        val_two = 0
        val_one = -1  if (data_one.first == 'BEGIN')
        val_one = 1   if (data_one.first == 'END')
        val_two = -1  if (data_two.first == 'BEGIN')
        val_two = 1   if (data_two.first == 'END')
        next val_one <=> val_two
      end .to_h
    end

    def get_hours_in_days days
      return days * 24
    end

    def get_days_in_year year
      return 12.times.map do |n|
        month = n + 1
        next get_days_in_month(year, month)
      end .sum
    end

    def get_days_in_month year, month
      return Date.new(year, month, -1).day
    end
end

input_file = ARGV[0].dup || ''
converter  = IcalConverter.new input_file
converter.convert
